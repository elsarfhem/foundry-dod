{
  "name": "Componi il mazzo e pesca",
  "type": "script",
  "author": "r8RTNiMjzdQbTh3C",
  "img": "icons/svg/card-hand.svg",
  "scope": "global",
  "command": "const deck = game.cards.getName(\"DoD - lista carte\");\nawait deck.recall({\n  chatNotification: false\n})\nconst pile = game.cards.getName(\"Mazzo\");\nconst hand = game.cards.getName(\"Mano\");\n\nconst suitToName = (suit) => {\n  switch (suit) {\n    case \"white\":\n      return \"Carta Bianca\";\n    case \"success\":\n      return \"Carta Successo\";\n    case \"issue\":\n      return \"Carta Imprevisto\";\n    case \"destiny\":\n      return \"Carta del Destino\";\n    case \"failure\":\n      return \"Carta Fallimento\";\n    case \"fortune\":\n      return \"Carta Fortuna\";\n  }\n}\n\nconst whiteCards = deck.cards.filter(card => card.suit == \"white\")\nconst successCards = deck.cards.filter(card => card.suit == \"success\")\nconst issueCards = deck.cards.filter(card => card.suit == \"issue\")\nconst destinyCards = deck.cards.filter(card => card.suit == \"destiny\")\nconst failureCards = deck.cards.filter(card => card.suit == \"failure\")\nconst fortuneCards = deck.cards.filter(card => card.suit == \"fortune\")\n\nlet confimed = false;\n\nnew Dialog({\n  title: \"Crea il mazzo\",\n  content: `\n     <form>\n     <div class=\"form-group\">\n       <label>Num. giocatori nella prova:</label>\n       <input id=\"num-players\" name=\"num-players\" value=\"1\" autofocus onFocus=\"select()\" tabindex=\"1\" type=\"number\" min=\"1\"></input>\n      </div>\n\t    <div class=\"form-group\">\n       <label>Num. Carte Successo:</label>\n       <input id=\"success-cards\" name=\"success-cards\" value=\"0\" tabindex=\"2\" type=\"number\" min=\"0\"></input>\n      </div>\n      <div class=\"form-group\">\n       <label>Num. Carte Fallimento:</label>\n       <input id=\"failure-cards\" name=\"failure-cards\" value=\"0\" tabindex=\"3\" type=\"number\" min=\"0\"></input>\n      </div>\n      <div class=\"form-group\">\n       <label>Num. Carte Imprevisto:</label>\n       <input id=\"issue-cards\" name=\"issue-cards\" value=\"0\" tabindex=\"4\" type=\"number\" min=\"0\"></input>\n      </div>\n      <div class=\"form-group\">\n       <label>Num. Carte del Destino:</label>\n       <input id=\"destiny-cards\" name=\"destiny-cards\" value=\"0\" tabindex=\"5\" type=\"number\" min=\"0\"></input>\n      </div>\n      <div class=\"form-group\">\n       <label>Num. Carte Fortuna:</label>\n       <input id=\"fortune-cards\" name=\"fortune-cards\" value=\"0\" tabindex=\"6\" type=\"number\" min=\"0\"></input>\n      </div>\n     </form>\n     `,\n  buttons: {\n    one: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: \"Componi & Pesca\",\n      callback: () => confirmed = true\n    },\n    two: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Annulla\",\n      callback: () => confirmed = false\n    }\n  },\n  default: \"one\",\n  close: async (html) => {\n    if (confirmed) {\n      const playersNum = parseInt(html.find('[name=num-players]')[0].value) || 1\n      const issueCardsNum = parseInt(html.find('[name=issue-cards]')[0].value) || 0\n      const successCardsNum = parseInt(html.find('[name=success-cards]')[0].value) || 0\n      const destinyCardsNum = parseInt(html.find('[name=destiny-cards]')[0].value) || 0\n      const failureCardsNum = parseInt(html.find('[name=failure-cards]')[0].value) || 0\n      const fortuneCardsNum = parseInt(html.find('[name=fortune-cards]')[0].value) || 0\n\n      ChatMessage.create({\n        user: game.user._id,\n        content: `<p>Il mazzo Ã© composto da: </p>\n        <ul>\n        <li>Carta Successo: ${successCardsNum}</li>\n        <li>Carta Fallimento: ${failureCardsNum}</li>\n\t\t\t\t<li>Carta Imprevisto: ${issueCardsNum}</li>\n\t\t\t\t<li>Carta Fortuna: ${fortuneCardsNum}</li>\n\t\t\t\t<li>Carta del Destino: ${destinyCardsNum}</li>\n        </ul>`\n      })\n\n\n      const whiteCardsNum = Math.max(0, 20 - successCardsNum - issueCardsNum - destinyCardsNum - failureCardsNum - fortuneCardsNum)\n\n      const whiteSelected = whiteCards.slice(0, whiteCardsNum)\n      const successSelected = successCards.slice(0, successCardsNum)\n      const issueSelected = issueCards.slice(0, issueCardsNum)\n      const destinySelected = destinyCards.slice(0, destinyCardsNum)\n      const failureSelected = failureCards.slice(0, failureCardsNum)\n      const fortuneSelected = fortuneCards.slice(0, fortuneCardsNum)\n\n      let cardsHtml = ``\n\n      if (issueCardsNum + successCardsNum + destinyCardsNum + failureCardsNum + fortuneCardsNum > 0)\n        await deck.pass(pile, whiteSelected.map(card => card.id)\n          .concat(successSelected.map(card => card.id))\n          .concat(issueSelected.map(card => card.id))\n          .concat(destinySelected.map(card => card.id))\n          .concat(failureSelected.map(card => card.id))\n          .concat(fortuneSelected.map(card => card.id)), {\n            chatNotification: false\n          })\n\n      if (pile.cards.size > 0) {\n        //pile.passDialog()\n        const drawCards = await hand.draw(pile, (pile.cards.size / (4 + playersNum)) + 1, {\n          how: CONST.CARD_DRAW_MODES.RANDOM,\n          chatNotification: false\n        })\n\n        drawCards.sort((a, b) => a.suit.localeCompare(b.suit))\n        console.log(drawCards)\n        const map = new Map();\n        drawCards.forEach(card => {\n          let cardTypeNum = map.get(card.suit)\n          if (cardTypeNum > 0) {\n            map.set(card.suit, ++cardTypeNum)\n          } else {\n            map.set(card.suit, 1)\n          }\n          cardsHtml += `<img class=\"card-face\" src=\"${card.img}\" alt=\"${card.name}\" title=\"${card.name}\" style=\"max-width: 90px;margin-right: 5px;margin-bottom: 5px;\"/>`\n\n        })\n        console.log(\"map \" + map)\n        const summary = Array.from(map).map(([suit, num]) => `<li>${suitToName(suit)}: ${num}</li>`).join('')\n        /* ChatMessage.create({\n          user: game.user._id,\n          content: summary\n        })\n         */ //hand.sheet.render(true)\n        Requestor.request({\n          description: `<ul>${summary}</ul>\n                <div class=\"card-draw flexrow\">${cardsHtml}</div>\n                `,\n          img: 'icons/svg/card-hand.svg',\n          title: \"Risultato della Prova\",\n          buttonData: [{\n              label: \"Vedi la mano\",\n              action: async () => {\n                const hand = game.cards.getName(\"Mano\");\n                hand.sheet.render(true)\n              }\n            },\n            {\n              label: \"Vedi il mazzo\",\n              action: async () => {\n                const pile = game.cards.getName(\"Mazzo\");\n                pile.sheet.render(true)\n              }\n            }\n          ]\n        })\n\n      }\n\n    }\n  }\n}).render(true);",
  "folder": null,
  "flags": {
    "advanced-macros": {
      "runAsGM": false,
      "runForSpecificUser": ""
    },
    "exportSource": {
      "world": "deck-of-destiny",
      "system": "wfrp4e",
      "coreVersion": "12.328",
      "systemVersion": "7.2.4"
    }
  },
  "_stats": {
    "systemId": "wfrp4e",
    "systemVersion": "7.0.3",
    "coreVersion": "12.328",
    "createdTime": 1671817896431,
    "modifiedTime": 1704982277941,
    "lastModifiedBy": "r8RTNiMjzdQbTh3C"
  }
}