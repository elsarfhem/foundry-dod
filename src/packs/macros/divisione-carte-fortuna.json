{
  "name": "Divisione Carte Fortuna",
  "type": "script",
  "author": "r8RTNiMjzdQbTh3C",
  "img": "icons/svg/coins.svg",
  "scope": "global",
  "command": "function tryAssignFortuneCard(resultMap, players, index, data, card) {\n    for (let i = 0; i < players.length; i++) {\n        let currentPlayer = players[index];\n        let currentFortuneCards = resultMap.get(currentPlayer);\n        let configDataPlayer = data.filter(obj => obj.player === currentPlayer)[0];\n        console.log(`${currentPlayer} has ${currentFortuneCards.length} of ${configDataPlayer.fortuneCards}`);\n        if (currentFortuneCards.length < configDataPlayer.fortuneCards) {\n            console.log(`card assigned to ${currentPlayer}`);\n            currentFortuneCards.push(card);\n            break;\n        } else {\n            console.log(`${currentPlayer} has reached max`);\n        }\n        index = ++index % players.length;\n    }\n    return index;\n}\n\n\nconst pile = game.cards.getName('Mazzo');\nconst hand = game.cards.getName('Mano');\n\nlet fortuneCards = hand.cards.filter(card => card.suit == 'fortune');\nlet fortuneCardsPile = pile.cards.filter(card => card.suit == 'fortune');\nif (fortuneCards.length === 0) {\n    ChatMessage.create({\n        user: game.user._id,\n        content: 'Non ci sono Carte Fortuna nella mano',\n    });\n    return;\n}\n\nlet confirmed = false;\n\nconst select = game.users.map((u) => {\n    return `\n  <div>\n\t<input type=\"checkbox\" id=\"${u.id}\" value=\"${u.id}\"/>\n  <label for=\"${u.id}\">${u.name}</label>\n  <input style=\"width: 24px\" type=\"number\" min=\"0\" id=\"value-${u.id}\" value=\"1\"/>\n  </div>\n  `;\n}).join('');\n\nnew Dialog({\n    title: `Dividi Carte Fortuna (${fortuneCards.length} carta/e)`,\n    content: `\n     <form>\n       <div class=\"form-group\">\n       <div>\n       ${select}\n       </div>\n      </div>\n     </form>\n     `,\n    buttons: {\n        one: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: 'Dividi',\n            callback: () => confirmed = true,\n        },\n        two: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: 'Annulla',\n            callback: () => confirmed = false,\n        },\n    },\n    default: 'one',\n    close: async (html) => {\n        if (confirmed) {\n            const selectedUserIds = Array.from(document.querySelectorAll('input[type=checkbox]:checked'));\n            console.log(selectedUserIds);\n            if (selectedUserIds.length === 0) {\n                ChatMessage.create({\n                    user: game.user._id,\n                    content: 'Non hai selezionato nessun giocatore',\n                });\n                return;\n            }\n            let data = selectedUserIds.map((e) => {\n                return {\n                    player: game.users.get(e.id).name,\n                    fortuneCards: parseInt(document.getElementById(`value-${e.id}`).value),\n                };\n            });\n            const totalCardsNumber = data.map((p) => {\n                return p.fortuneCards;\n            }).reduce((a, b) => a + b, 0);\n            if (totalCardsNumber !== (fortuneCards.length)) {\n                ChatMessage.create({\n                    user: game.user._id,\n                    content: `Il totale delle carte (${totalCardsNumber}) Ã© diverso dalle carte da dividere (${fortuneCards.length})`,\n                });\n                return;\n            }\n\n            console.log(data);\n\n            if (selectedUserIds.length <= 0) {\n                ChatMessage.create({\n                    user: game.user._id,\n                    content: 'Devono essere specificati almeno 2 giocatori',\n                });\n                return;\n            }\n\n            let cards = Array.from(hand.cards.values());\n            console.log(cards);\n            if (cards.filter(c => c.suit === 'fortune').length === 0) {\n                ChatMessage.create({\n                    user: game.user._id,\n                    content: 'Non ci sono carte fortuna nella mano attuale',\n                });\n                return;\n            }\n\n            let players = data.map((d) => {\n                return d.player;\n            });\n            let resultMap = new Map();\n            for (const player of players) {\n                resultMap.set(player, []);\n            }\n            console.log(resultMap);\n\n            let index = 0;\n            while (cards.length > 0) {\n                cards.sort(() => Math.random() - 0.5);\n                let card = cards.pop();\n                console.log(index);\n                console.log(card);\n\n                if (card.suit === 'fortune') {\n                    index = tryAssignFortuneCard(resultMap, players, index, data, card);\n                }\n                index = ++index % players.length;\n            }\n            console.log(resultMap);\n\n            let htmlMsg = `\n      <h3>Divisione Carte Fortuna</h3>\n      `;\n            for (let [p, cs] of resultMap) {\n                htmlMsg += `<p>${p} (${cs.length})</p><div class=\"card-draw flexrow\">`;\n                for (let c of cs) {\n                    htmlMsg += `<img class=\"card-face\" src=\"${c.img}\" alt=\"${c.name}\" title=\"${c.name}\" style=\"max-width: 90px;margin-right: 5px;margin-bottom: 5px;\"/>`;\n                }\n                htmlMsg += '</div>';\n            }\n\n            await ChatMessage.create({\n                user: game.user._id,\n                content: htmlMsg,\n            });\n        }\n    },\n}).render(true);",
  "folder": null,
  "ownership": {
    "default": 2,
    "r8RTNiMjzdQbTh3C": 3
  },
  "flags": {
    "advanced-macros": {
      "runAsGM": false,
      "runForSpecificUser": ""
    }
  },
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "coreVersion": "12.330",
    "systemId": "dod",
    "systemVersion": "0.1.0",
    "createdTime": 1719951075446,
    "modifiedTime": 1719951078250,
    "lastModifiedBy": "r8RTNiMjzdQbTh3C"
  },
  "_id": "P7ZPcZFTPx86jSWO",
  "sort": 500000,
  "_key": "!macros!P7ZPcZFTPx86jSWO"
}
