/**
 * Extend the base Actor document by defining a custom roll data structure which is ideal for the Simple system.
 * @extends {Actor}
 */
export class DeckOfDestinyActor extends Actor {
  /**
   * Pre-process a creation operation for a single Document instance.
   * This method is called before the creation of the document and allows for modifications to the pending Document instance.
   *
   * @param {Object} data - The initial data object provided to the document creation request.
   * @param {Object} options - Additional options which modify the creation request.
   * @param {Object} user - The User requesting the document creation.
   * @return {Promise<boolean>} - Return false to exclude this Document from the creation operation.
   * @override
   */
  async _preCreate(data, options, user) {
    const result = await super._preCreate(data, options, user);
    this.updateSource({
      // Automatically set the actor link to the token for characters.
      'prototypeToken.actorLink': this.type === 'character'
    });
    return result;
  }

  /**
   * Post-process a creation operation for a single Document instance.
   * Post-operation events occur for all connected clients.
   *
   * @param {Object} data - The initial data object provided to the document creation request.
   * @param {Object} options - Additional options which modify the creation request.
   * @param {string} userId - The id of the User requesting the document update.
   * @override
   */
  async _onCreate(data, options, userId) {
    super._onCreate(data, options, userId);
    // Add fixed items to the actor.
    for (const item of CONFIG.DECK_OF_DESTINY.fixedItems) {
      await Item.create(item, { parent: this });
    }
  }

  /** @override */
  prepareData() {
    // Prepare data for the actor. Calling the super version of this executes
    // the following, in order: data reset,
    // prepareBaseData(), prepareEmbeddedDocuments(),
    // prepareDerivedData().
    super.prepareData();
  }

  /** @override */
  prepareBaseData() {
    // Data modifications in this step occur before processing embedded
    // documents or derived data.
  }

  /**
   * @override
   * Augment the actor source data with additional dynamic data that isn't
   * handled by the actor's DataModel. Data calculated in this step should be
   * available both inside and outside of character sheets (such as if an actor
   * is queried and has a roll executed directly from it).
   */
  prepareDerivedData() {
    const actorData = this;
    // eslint-disable-next-line no-unused-vars
    const flags = actorData.flags.dod || {};
  }

  /**
   *
   * @override
   * Augment the actor's default getRollData() method by appending the data object
   * generated by the its DataModel's getRollData(), or null. This polymorphic
   * approach is useful when you have actors & items that share a parent Document,
   * but have slightly different data preparation needs.
   */
  getRollData() {
    return { ...super.getRollData(), ...(this.system.getRollData?.() ?? null) };
  }

  /**
   * Convert the actor document to a plain object.
   *
   * The built in `toObject()` method will ignore derived data when using Data Models.
   * This additional method will instead use the spread operator to return a simplified
   * version of the data.
   *
   * @return {object} Plain object either via deepClone or the spread operator.
   */
  toPlainObject() {
    const result = { ...this };

    // Simplify system data.
    result.system = this.system.toPlainObject();

    // Add items.
    result.items = this.items?.size > 0 ? this.items.contents : [];

    return result;
  }
}
