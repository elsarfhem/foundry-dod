{
  "name": "Pesca",
  "type": "script",
  "author": "r8RTNiMjzdQbTh3C",
  "img": "icons/svg/card-hand.svg",
  "scope": "global",
  "command": "const suitToName = (suit) => {\n    switch (suit) {\n        case 'white':\n            return 'Carta Bianca';\n        case 'success':\n            return 'Carta Successo';\n        case 'issue':\n            return 'Carta Imprevisto';\n        case 'destiny':\n            return 'Carta del Destino';\n        case 'failure':\n            return 'Carta Fallimento';\n        case 'fortune':\n            return 'Carta Fortuna';\n    }\n};\n\nlet confimed = false;\n\nnew Dialog({\n    title: 'Pesca dal mazzo',\n    content: `\n     <form>\n     <div class=\"form-group\">\n       <label>Num. giocatori nella prova:</label>\n       <input id=\"num-players\" name=\"num-players\" value=\"1\" autofocus onFocus=\"select()\" tabindex=\"1\" type=\"number\" min=\"1\"></input>\n      </div>\n     </form>\n     `,\n    buttons: {\n        one: {\n            icon: '<i class=\"fas fa-check\"></i>',\n            label: 'Pesca',\n            callback: () => confirmed = true,\n        },\n        two: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: 'Annulla',\n            callback: () => confirmed = false,\n        },\n    },\n    default: 'one',\n    close: async (html) => {\n        if (confirmed) {\n\n            const deck = game.cards.getName('DoD - lista carte');\n            let pile = game.cards.getName('Mazzo');\n            const hand = game.cards.getName('Mano');\n\n            const whiteCards = deck.cards.filter(card => card.suit == 'white');\n            const successSelected = pile.cards.filter(card => card.suit == 'success');\n            const issueSelected = pile.cards.filter(card => card.suit == 'issue');\n            const destinySelected = pile.cards.filter(card => card.suit == 'destiny');\n            const failureSelected = pile.cards.filter(card => card.suit == 'failure');\n            const fortuneSelected = pile.cards.filter(card => card.suit == 'fortune');\n\n            const playersNum = parseInt(html.find('[name=num-players]')[0].value) || 1;\n            const issueCardsNum = issueSelected.length;\n            const successCardsNum = successSelected.length;\n            const destinyCardsNum = destinySelected.length;\n            const failureCardsNum = failureSelected.length;\n            const fortuneCardsNum = fortuneSelected.length;\n            const whiteCardsNum = Math.max(0, 20 - successCardsNum - issueCardsNum - destinyCardsNum - failureCardsNum - fortuneCardsNum);\n\n            ChatMessage.create({\n                user: game.user._id,\n                content: `<p>Il mazzo Ã© composto da: </p>\n        <ul>\n        <li>${suitToName('success')}: ${successCardsNum}</li>\n        <li>${suitToName('failure')}: ${failureCardsNum}</li>\n\t\t\t\t<li>${suitToName('issue')}: ${issueCardsNum}</li>\n\t\t\t\t<li>${suitToName('fortune')}: ${fortuneCardsNum}</li>\n\t\t\t\t<li>${suitToName('destiny')}: ${destinyCardsNum}</li>\n        <li>${suitToName('white')}: ${whiteCardsNum}</li>\n        </ul>`,\n            });\n\n            const whiteSelected = whiteCards.slice(0, whiteCardsNum);\n\n            let cardsHtml = ``;\n\n            if (issueCardsNum + successCardsNum + destinyCardsNum + failureCardsNum + fortuneCardsNum === 0)\n                return;\n\n            await deck.pass(pile, whiteSelected.map(card => card.id), {\n                chatNotification: false,\n            });\n\n            pile = game.cards.getName('Mazzo');\n\n            if (pile.cards.size > 0) {\n                const drawCards = await hand.draw(pile, (pile.cards.size / (4 + playersNum)) + 1, {\n                    how: CONST.CARD_DRAW_MODES.RANDOM,\n                    chatNotification: false,\n                });\n                //pile.passDialog()\n                console.log(drawCards);\n                drawCards.sort((a, b) => a.suit.localeCompare(b.suit));\n                const map = new Map();\n                drawCards.forEach(card => {\n                    let cardTypeNum = map.get(card.suit);\n                    if (cardTypeNum > 0) {\n                        map.set(card.suit, ++cardTypeNum);\n                    } else {\n                        map.set(card.suit, 1);\n                    }\n                    cardsHtml += `<img class=\"card-face\" src=\"${card.img}\" alt=\"${card.name}\" title=\"${card.name}\" style=\"max-width: 90px;margin-right: 5px;margin-bottom: 5px;\"/>`;\n                });\n                console.log('map ' + map);\n                const summary = Array.from(map).map(([suit, num]) => `<li>${suitToName(suit)}: ${num}</li>`).join('');\n\n                const buttons = [{\n                    label: 'Vedi la mano',\n                    action: async () => {\n                        game.cards.getName('Mano').sheet.render(true);\n                    },\n                },\n                    {\n                        label: 'Vedi il mazzo',\n                        action: async () => {\n                            game.cards.getName('Mazzo').sheet.render(true);\n                        },\n                    },\n                ];\n\n                if (map.get('fortune') > 0) {\n                    buttons.push({\n                        label: 'Dividi Carte Fortuna',\n                        action: async () => {\n                            game.macros.find((k, v) => k.name === 'Divisione Carte Fortuna').execute();\n                        },\n                    });\n                }\n                if (map.get('success') + map.get('fortune') >= map.get('failure')) {\n                    buttons.push({\n                        label: 'Rischia',\n                        action: async () => {\n                            game.macros.find((k, v) => k.name === 'Rischia').execute();\n                        },\n                    });\n                }\n\n                Requestor.request({\n                    description: `<ul>${summary}</ul>\n                <div class=\"card-draw flexrow\">${cardsHtml}</div>\n                `,\n                    img: 'icons/svg/card-hand.svg',\n                    title: 'Risultato della Prova',\n                    buttonData: buttons,\n                });\n            }\n        }\n    },\n}).render(true);",
  "folder": null,
  "ownership": {
    "default": 2,
    "r8RTNiMjzdQbTh3C": 3
  },
  "flags": {
    "advanced-macros": {
      "runAsGM": false,
      "runForSpecificUser": ""
    },
    "exportSource": {
      "world": "blood-rain",
      "system": "wfrp4e",
      "coreVersion": "11.315",
      "systemVersion": "7.0.3"
    }
  },
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "coreVersion": "12.328",
    "systemId": "wfrp4e",
    "systemVersion": "7.2.4",
    "createdTime": 1719951076430,
    "modifiedTime": 1719951078250,
    "lastModifiedBy": "r8RTNiMjzdQbTh3C"
  },
  "_id": "E4DWnKqJZIxME2Z9",
  "sort": 100000,
  "_key": "!macros!E4DWnKqJZIxME2Z9"
}
